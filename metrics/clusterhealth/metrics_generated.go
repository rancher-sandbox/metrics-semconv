// Package clusterhealth is auto-generated by metricsgen. DO NOT EDIT.
package clusterhealth

import (
	"context"
	otelattribute "go.opentelemetry.io/otel/attribute"
	otelmetricsdk "go.opentelemetry.io/otel/metric"
)

type EnumControllerAction string

func (e EnumControllerAction) Val() string {
	return string(e)
}

const (
	EnumCreate EnumControllerAction = "create"
	EnumUpdate EnumControllerAction = "update"
	EnumPatch  EnumControllerAction = "patch"
	EnumRead   EnumControllerAction = "read"
	EnumDelete EnumControllerAction = "delete"
	EnumList   EnumControllerAction = "list"
	EnumWatch  EnumControllerAction = "watch"
)

type EnumRancherK8sDistribution string

func (e EnumRancherK8sDistribution) Val() string {
	return string(e)
}

const (
	EnumK3s  EnumRancherK8sDistribution = "k3s"
	EnumRke  EnumRancherK8sDistribution = "rke"
	EnumRke2 EnumRancherK8sDistribution = "rke2"
)

type Metrics struct {
	*MetricRancherManagedCluster
}

// NewMetrics initializes the set of following metrics
// - RancherManagedCluster  : metric recording each downstream cluster managed by rancher
func NewMetrics(meter otelmetricsdk.Meter) (Metrics, error) {
	m := Metrics{
		MetricRancherManagedCluster: &MetricRancherManagedCluster{},
	}
	if err := m.MetricRancherManagedCluster.init(meter); err != nil {
		return m, err
	}
	return m, nil
}

// MetricRancherManagedCluster metric recording each downstream cluster managed by rancher
type MetricRancherManagedCluster struct {
	data otelmetricsdk.Int64Gauge
}

func (m *MetricRancherManagedCluster) init(meter otelmetricsdk.Meter) error {
	var err error
	m.data, err = meter.Int64Gauge(
		"rancher.managed.cluster",
		otelmetricsdk.WithDescription("metric recording each downstream cluster managed by rancher"),
	)
	return err
}

// Record records a data point for the specified metric
// - rancherClusterId : The internal id of the cluster in rancher
// - rancherK8sDistribution : The Kubernetes distribution of the cluster.
// - k8sResourceName : The name of the Kubernetes resource.
// - k8sResourceNamespace : The namespace of the Kubernetes resource.
// - k8sResourceGvk : The group, version, and kind of the Kubernetes resource.
func (m *MetricRancherManagedCluster) Record(
	ctx context.Context,
	value int64,
	rancherClusterId string,
	rancherK8sDistribution EnumRancherK8sDistribution,
	k8sResourceName string,
	k8sResourceNamespace string,
	k8sResourceGvk string,
	attributeOpts ...AttributeRancherManagedClusterOption,
) {
	options := &AttributeRancherManagedClusterOptions{}
	options.Apply(attributeOpts...)
	optionalAttr := options.Attributes()
	requiredAttrs := []otelattribute.KeyValue{
		otelattribute.String("rancher.cluster.id", rancherClusterId),
		otelattribute.String("rancher.k8s.distribution", rancherK8sDistribution.Val()),
		otelattribute.String("k8s.resource.name", k8sResourceName),
		otelattribute.String("k8s.resource.namespace", k8sResourceNamespace),
		otelattribute.String("k8s.resource.gvk", k8sResourceGvk),
	}

	attrs := otelattribute.NewSet(
		append(requiredAttrs, optionalAttr...)...,
	)
	m.data.Record(ctx, value, otelmetricsdk.WithAttributeSet(attrs))
}

type AttributeRancherManagedClusterOptions struct {
	controllerManagedBy *[]string
}

type AttributeRancherManagedClusterOption func(*AttributeRancherManagedClusterOptions)

func (o *AttributeRancherManagedClusterOptions) Apply(opts ...AttributeRancherManagedClusterOption) {
	for _, opt := range opts {
		opt(o)
	}
}

func (o *AttributeRancherManagedClusterOptions) Attributes() []otelattribute.KeyValue {
	ret := []otelattribute.KeyValue{}
	if o.controllerManagedBy != nil {
		ret = append(ret, otelattribute.StringSlice("controller.managedBy", *o.controllerManagedBy))
	}
	return ret
}

// WithRancherManagedClusterControllerManagedBy sets the optional controller.managedBy attribute
// corresponding to The name of the controller manager that manages this controller
func WithRancherManagedClusterControllerManagedBy(controllerManagedBy []string) AttributeRancherManagedClusterOption {
	return func(o *AttributeRancherManagedClusterOptions) {
		val := &controllerManagedBy
		o.controllerManagedBy = val
	}
}
